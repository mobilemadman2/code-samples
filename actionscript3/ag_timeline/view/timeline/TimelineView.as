package net.believecollective.ag2010.view.timeline {
	import net.believecollective.ag2010.app.ApplicationFacade;	import net.believecollective.ag2010.model.vo.timeline.AGLandscapeVO;	import net.believecollective.ag2010.patterns.proxy.ConfigProxy;	import net.believecollective.ag2010.view.AGBaseView;	import net.believecollective.ag2010.view.timeline.components.TimelineViewGFX;	/**
	 * @author Dan Mackie (dan@believecollective.net)
	 */
	public class TimelineView extends AGBaseView {				public static const NAME : String = "TimelineView";						public function TimelineView() {			super(NAME);		}		override public function fInit() : void {			mcGFX = fCreateGFX();		}
		private function fCreateGFX() : TimelineViewGFX {//			_aHistory.push(ApplicationFacade.ACTIVE_ITEM_ID);			var t_o : TimelineViewGFX = new TimelineViewGFX(_oConfig as ConfigProxy, _oTimeline);			addChild(t_o);			return t_o;		}		override public function fUpdate(arg_o : Object = null, arg_sEvent : String = "") : void {			switch(arg_sEvent){				case ApplicationFacade.NOTE_INIT_VIEWS: 					// the timeline (summary) xml is loaded					(mcGFX as TimelineViewGFX).fInitLoadingSequence();					break;					////				case ApplicationFacade.NOTE_NEW_DATA_LOADED: 					// the landscape xml is loaded					(mcGFX as TimelineViewGFX).landscapeVO = arg_o as AGLandscapeVO;					break;					/////				case ApplicationFacade.NOTE_TIMELINE_EVENT_ACTIVE:					(mcGFX as TimelineViewGFX).fActivateEvent();					break;					/////				case ApplicationFacade.NOTE_ENTERING_NEW_ERA:					(mcGFX as TimelineViewGFX).fShiftEras();					break;					/////				case "mouse_over":				case "mouse_out":					(mcGFX as TimelineViewGFX).fHighlightEvent(arg_o as Number, arg_sEvent);					break;					/////								case ApplicationFacade.NOTE_TIMELINE_MOVE:					(mcGFX as TimelineViewGFX).fMoveContent(arg_sEvent);					break;				case ApplicationFacade.NOTE_TIMELINE_BOUNCE:					(mcGFX as TimelineViewGFX).fMoveContent(arg_sEvent, arg_o as Number);					break;			}		}			}}
	