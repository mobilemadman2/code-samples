package net.believecollective.ag2010.patterns.proxy {
	import net.believecollective.ag2010.app.ApplicationFacade;	import net.believecollective.frameworks.pureMVC2.patterns.proxy.StageProxy;	import net.believecollective.utils.Tracer;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	/**
	 * @author Dan Mackie (dan@believecollective.net)
	 */
	public class AGStageProxy extends StageProxy {
		public static const NAME : String = "AGStageProxy";		private var mouseOffStage:Boolean;				public function AGStageProxy(data : Stage, delayNotifications : Boolean = true, arg_sScaleMode:String = null) {			super(data, delayNotifications, arg_sScaleMode);			stage.align = StageAlign.RIGHT;			stage.addEventListener(KeyboardEvent.KEY_DOWN, fCheckKeys);			if (ApplicationFacade.IS_FACEBOOK == true || ApplicationFacade.IS_USING_LOCAL) return;			else ExternalInterface.addCallback("mouseUpFunction", fMouseLeave);		}		private function fMouseLeave() : void {			Tracer.TRACE("!!!Marianne : AGStageProxy.fMouseLeave : ");			mouseOffStage = true;			sendNotification(ApplicationFacade.NOTE_MOUSE_LEAVE);			stage.removeEventListener(MouseEvent.MOUSE_UP, fTrackMouse);  			stage.removeEventListener(Event.MOUSE_LEAVE, fTrackMouse);  			stage.removeEventListener(MouseEvent.MOUSE_OUT, fTrackMouse);  			stage.removeEventListener(MouseEvent.MOUSE_OVER, fTrackMouse);		  			stage.removeEventListener(MouseEvent.MOUSE_UP, fTrackMouse);			}		public function fDrag() : void {			mouseOffStage = false;			stage.addEventListener(MouseEvent.MOUSE_UP, fTrackMouse);  			stage.addEventListener(Event.MOUSE_LEAVE, fTrackMouse);  			stage.addEventListener(MouseEvent.MOUSE_OUT, fTrackMouse);  			stage.addEventListener(MouseEvent.MOUSE_OVER, fTrackMouse);	  			stage.addEventListener(MouseEvent.MOUSE_UP, fTrackMouse);			}
		private function fTrackMouse(event : Event) : void {			var t_s : String;			switch(event.type){				case Event.MOUSE_LEAVE:					// if mouse is down (ie dragging) this event is dispatched upon release of the mouse ouside the stage					// if the mouse is not down, it is dispatched upoon rolling off the stage					fMouseLeave();					break;				case MouseEvent.MOUSE_OUT:					break;				case MouseEvent.MOUSE_UP:					if (mouseOffStage)sendNotification(ApplicationFacade.NOTE_MOUSE_LEAVE);					stage.removeEventListener(MouseEvent.MOUSE_UP, fTrackMouse);  					stage.removeEventListener(Event.MOUSE_LEAVE, fTrackMouse);  					stage.removeEventListener(MouseEvent.MOUSE_OUT, fTrackMouse);  					stage.removeEventListener(MouseEvent.MOUSE_OVER, fTrackMouse);		  					stage.removeEventListener(MouseEvent.MOUSE_UP, fTrackMouse);										break;				case MouseEvent.MOUSE_OVER:					mouseOffStage = false;					break;				case MouseEvent.MOUSE_MOVE:					/// ??? is this necessary ???//					(ApplicationFacadeBase.ROOT as Main).mcCursor.x = (ApplicationFacadeBase.ROOT as Main).mouseX;//					(ApplicationFacadeBase.ROOT as Main).mcCursor.y = (ApplicationFacadeBase.ROOT as Main).mouseY;					sendNotification(ApplicationFacade.NOTE_MOUSE_MOVE);					break;			}		}
		private function fCheckKeys(event : KeyboardEvent) : void {//			var t_oConfig:AGConfigVO = (facade.retrieveProxy(ConfigProxy.NAME) as ConfigProxy).config;//			if (t_oConfig.testmode){				if (event.keyCode == 84 && event.ctrlKey && event.altKey && event.shiftKey){					sendNotification(ApplicationFacade.TESTNOTE_TOGGLE_TEST_PANEL);				}				if (event.keyCode == 80 && event.ctrlKey && event.altKey && event.shiftKey){					sendNotification(ApplicationFacade.TESTNOTE_GET_ACTIVE_PANE_ELEMENT_POSITIONS);					sendNotification(ApplicationFacade.TESTNOTE_TOGGLE_TEST_PANEL);				}				if (event.keyCode == 68 && event.ctrlKey && event.altKey && event.shiftKey){					sendNotification(ApplicationFacade.TESTNOTE_MAKE_PANE_ELEMENTS_DRAGGABLE);				}				if (event.keyCode == 73 && event.ctrlKey && event.altKey && event.shiftKey){					sendNotification(ApplicationFacade.TESTNOTE_TOGGLE_TOOLTIPS);					}//			}		}				public function get customStageHeight() : Number {			return (stageHeight);		}	}
}
