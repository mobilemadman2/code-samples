package net.believecollective.ag2010.patterns.proxy {	import net.believecollective.ag2010.helpers.AGMethodHelper;	import net.believecollective.ag2010.model.vo.AGConfigVO;	import net.believecollective.frameworks.pureMVC2.view.buttons.IButtonInit;	import net.believecollective.model.vo.InterfaceLanguageVO;	import org.puremvc.as3.interfaces.IProxy;	import org.puremvc.as3.patterns.proxy.Proxy;	/**	 * @author Dan Mackie (dan@believecollective.net)	 */	public class ConfigProxy extends Proxy implements IProxy {		public static const NAME : String = "ConfigProxy";		private var _oConfig : AGConfigVO;		private var nLangCount:Number;			private var nEraCount:Number;					public function ConfigProxy() {			super(NAME);			nLangCount = 0;			nEraCount = 0;		}		public function set config_xml(xml : XML) : void {			_oConfig = AGMethodHelper.parseConfig(xml);			}				public function fAddLanguageObject(xml : XML) : void {			_oConfig.fAddLangObject(AGMethodHelper.fParseLangXML(xml));			nLangCount++;			if (nLangCount == _oConfig.viewIDs.length) {				(facade.retrieveProxy(ApplicationProxy.NAME) as ApplicationProxy).fLangsParsed();				nLangCount = 0;			}		}				public function fAddDateData(xml : XML) : void {			_oConfig.fAddEraObjects(AGMethodHelper.fParseEraXML(xml));			nEraCount++;			if (nEraCount == _oConfig.eraIDs.length) {				(facade.retrieveProxy(ApplicationProxy.NAME) as ApplicationProxy).fConfigParsed();				nEraCount = 0;			}		}		public function get config() : AGConfigVO {			return _oConfig;		}		public function fGetInterfaceTextVO(arg_sView:String) : InterfaceLanguageVO {			var t_a:Array = _oConfig.viewInterfaceTextObjects;			var t_o:InterfaceLanguageVO = null;			for (var i : Number = 0; i < t_a.length; i++) {				var t_oITVO : InterfaceLanguageVO = t_a[i] as InterfaceLanguageVO;	//				Tracer.TRACE("!!!Dan Mackie (dan@believecollective.net) : ConfigProxy.fGetInterfaceTextVO : ", t_oITVO);				if (t_oITVO.theID == arg_sView) {					t_o = t_oITVO;					break;				}			}			return t_o;		}				public function fGetDefaultButtonConfig(arg_sType:String, arg_sTTT:String) : IButtonInit {			var t_sTTT:String;			var t_oBtnCfg:IButtonInit;			switch (arg_sType){				case "icon":					t_sTTT = arg_sTTT;					t_oBtnCfg = _oConfig.fGetIconButtonConfig({sTTT:t_sTTT});					break;			}			return t_oBtnCfg;		}	}}