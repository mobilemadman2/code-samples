package net.believecollective.ag2010.patterns.proxy {	import net.believecollective.ag2010.app.ApplicationFacade;	import net.believecollective.ag2010.helpers.AGMethodHelper;	import net.believecollective.ag2010.model.vo.timeline.AGTimelineVO;	import net.believecollective.ag2010.model.vo.timeline.eras.AGEraVO;	import net.believecollective.ag2010.model.vo.timeline.events.AGEventVO;	import net.believecollective.model.vo.InterfaceLanguageVO;	import org.puremvc.as3.interfaces.IProxy;	import org.puremvc.as3.patterns.proxy.Proxy;	/**	 * @author Dan Mackie (dan@believecollective.net)	 */	public class TimelineProxy extends Proxy implements IProxy {		public static const NAME : String = "TimelineProxy";				private var _oTimelineVO : AGTimelineVO;				public function TimelineProxy() {			super(NAME);		}			public function set timeline_xml(xml : XML) : void {//			_oTimelineVO = AGMethodHelper.parseTimeline(xml, facade.retrieveProxy(HistoryProxy.NAME) as HistoryProxy, (facade.retrieveProxy(ConfigProxy.NAME) as ConfigProxy).fGetInterfaceTextVO("TimelineView") as InterfaceLanguageVO);			_oTimelineVO = AGMethodHelper.parseTimeline(																xml, 																facade.retrieveProxy(HistoryProxy.NAME) as HistoryProxy, 																(facade.retrieveProxy(ConfigProxy.NAME) as ConfigProxy).fGetInterfaceTextVO("TimelineView") as InterfaceLanguageVO,																(facade.retrieveProxy(ConfigProxy.NAME) as ConfigProxy).config.eraDateData																);		}				public function get timeline() : AGTimelineVO {			return _oTimelineVO;		}				public function fSetGlobalVars(arg_sNote : String) : void {			for (var i:int = 0;i < _oTimelineVO.eras.length; i++){				for (var j: int = 0 ; j< (_oTimelineVO.eras[i] as AGEraVO).events.length; j++) {					if ((( _oTimelineVO.eras[i] as AGEraVO).events[j] as AGEventVO).eventID == ApplicationFacade.ACTIVE_ITEM_ID) {						// this is the active event 						// get horizontal position & era of this event						ApplicationFacade.CURRENT_X_IN_FOCUS = (( _oTimelineVO.eras[i] as AGEraVO).events[j] as AGEventVO).xAxisPosition;						ApplicationFacade.CURRENT_ERA_IN_VIEW = i;						sendNotification(arg_sNote);						return;					}				}			}		}				public function fCalculateYear(arg_nPercentage : Number = -1, arg_iEra : int = -1): Number {			// by default returns the beginning year of the registered era in view			if (arg_nPercentage == -1) arg_nPercentage = 0;			if (arg_iEra == -1) arg_iEra = ApplicationFacade.CURRENT_ERA_IN_VIEW;			var t_oVO : AGEraVO = _oTimelineVO.eras[arg_iEra] as AGEraVO;			var t_nYear : Number = Math.round(t_oVO.pseudoStartYear + ((t_oVO.pseudoEndYear - t_oVO.pseudoStartYear)* arg_nPercentage));			if (t_nYear < t_oVO.realStartYear)t_nYear = t_oVO.realStartYear;			if (t_nYear > t_oVO.realEndYear)t_nYear = t_oVO.realEndYear;			return t_nYear;		}		public function fGetEventURL(arg_nID : Number = -1) : String {			// by default returns the url of the registered active event			if (arg_nID == -1) arg_nID = ApplicationFacade.ACTIVE_ITEM_ID;			for each (var oEraVO : AGEraVO in _oTimelineVO.eras) {				for each (var oEventVO : AGEventVO in oEraVO.events) {					if (oEventVO.eventID == arg_nID) return oEventVO.eventURL;				}			}			return null;		}				public function fGetEventTimeline(arg_nID : Number = -1) : String {			// by default returns the url of the registered active event			if (arg_nID == -1) arg_nID = ApplicationFacade.ACTIVE_ITEM_ID;			for each (var oEraVO : AGEraVO in _oTimelineVO.eras) {				for each (var oEventVO : AGEventVO in oEraVO.events) {					if (oEventVO.eventID == arg_nID) return oEventVO.timelineID;				}			}			return null;		}				public function fEventIsFactoid(arg_nID : Number = -1) : Boolean {			// by default returns the factoid status of the registered active event			if (arg_nID == -1) arg_nID = ApplicationFacade.ACTIVE_ITEM_ID;			for each (var oEraVO : AGEraVO in _oTimelineVO.eras) {				for each (var oEventVO : AGEventVO in oEraVO.events) {					if (oEventVO.eventID == arg_nID) return oEventVO.isFactoid;				}			}			return null;		}				public function fEventThumbName(arg_nID : Number = -1) : String {			// by default returns the factoid status of the registered active event			if (arg_nID == -1) arg_nID = ApplicationFacade.ACTIVE_ITEM_ID;			for each (var oEraVO : AGEraVO in _oTimelineVO.eras) {				for each (var oEventVO : AGEventVO in oEraVO.events) {					if (oEventVO.eventID == arg_nID) return oEventVO.timelineID + "-" + oEventVO.alias;				}			}			return "";		}				public function fGetEraStartX(arg_iEra: int = -1) : Number {			// by default returns the start X position of the registered era in view			if (arg_iEra == -1) arg_iEra = ApplicationFacade.CURRENT_ERA_IN_VIEW;			return (_oTimelineVO.eras[arg_iEra] as AGEraVO).eraStartX;		}				public function fGetNextEvent(): AGEventVO {			// returns the ID of the next visible event after the registered active event			var t_oCurrentEra : AGEraVO = _oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO;			var t_oCurrentEvent : AGEventVO;			for each (var oEvent : AGEventVO in t_oCurrentEra.events) {				if (oEvent.eventID == ApplicationFacade.ACTIVE_ITEM_ID) {					t_oCurrentEvent = oEvent;					break;				}			}			for (var i:int = t_oCurrentEvent.chronologicalPosition +1; i< t_oCurrentEra.events.length; i++){				// return the next visible event in this era				if (t_oCurrentEra.events[i].visible == true) return t_oCurrentEra.events[i];			}			if (ApplicationFacade.CURRENT_ERA_IN_VIEW < _oTimelineVO.eras.length-1){				// return the first visible event in the next era				t_oCurrentEra = _oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW +1];				for (var i:int = 0; i< t_oCurrentEra.events.length; i++){					if (t_oCurrentEra.events[i].visible == true) return t_oCurrentEra.events[i];				}			}			// this is the last visible event in the timeline			return null;		}		public function fGetPrevEvent(): AGEventVO {			// returns the ID of the last visible event before the registered active event			var t_oCurrentEra : AGEraVO = _oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO;			var t_oCurrentEvent : AGEventVO;			for each (var oEvent : AGEventVO in t_oCurrentEra.events) {				if (oEvent.eventID == ApplicationFacade.ACTIVE_ITEM_ID) {					t_oCurrentEvent = oEvent;					break;				}			}			for (var i:int = t_oCurrentEvent.chronologicalPosition -1; i> -1; i--){				// return the last visible event in this era				if (t_oCurrentEra.events[i].visible == true) return t_oCurrentEra.events[i];			}			if (ApplicationFacade.CURRENT_ERA_IN_VIEW > 0){				// return the last visible event in the previos era				t_oCurrentEra = _oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW -1];				for (var i:int = t_oCurrentEra.events.length-1; i>-1 ; i--){					if (t_oCurrentEra.events[i].visible == true) return t_oCurrentEra.events[i];				}			}			// this is the first visible event in the timeline			return null;		}					public function fCheckBounds() : Boolean {			if ((_oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO).eraStartX > ApplicationFacade.CURRENT_X_IN_FOCUS - ApplicationFacade.HORIZONTAL_FOCUS_POINT && ApplicationFacade.CURRENT_ERA_IN_VIEW == 0) {				// !! can't go any further into the past!!!				var t_n : Number = (_oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO).eraStartX + ApplicationFacade.HORIZONTAL_FOCUS_POINT - ApplicationFacade.CURRENT_X_IN_FOCUS;				ApplicationFacade.CURRENT_X_IN_FOCUS = (_oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO).eraStartX + ApplicationFacade.HORIZONTAL_FOCUS_POINT;//				if (Math.abs(t_n/2) > ApplicationFacade.HORIZONTAL_FOCUS_POINT) t_n = (t_n < 1) ? -2*ApplicationFacade.HORIZONTAL_FOCUS_POINT : 2*ApplicationFacade.HORIZONTAL_FOCUS_POINT;				sendNotification(ApplicationFacade.NOTE_TIMELINE_BOUNCE, t_n);				return false;			}			if ((_oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO).eraEndX < ApplicationFacade.CURRENT_X_IN_FOCUS - ApplicationFacade.HORIZONTAL_FOCUS_POINT  + ApplicationFacade.APP_WIDTH && ApplicationFacade.CURRENT_ERA_IN_VIEW == _oTimelineVO.eras.length -1) {				// !! can't go any further into the future!!!				var t_n : Number = (_oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO).eraEndX + ApplicationFacade.HORIZONTAL_FOCUS_POINT - ApplicationFacade.APP_WIDTH - ApplicationFacade.CURRENT_X_IN_FOCUS;				ApplicationFacade.CURRENT_X_IN_FOCUS = (_oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO).eraEndX + ApplicationFacade.HORIZONTAL_FOCUS_POINT - ApplicationFacade.APP_WIDTH;//				if (Math.abs(t_n/2) > ApplicationFacade.HORIZONTAL_FOCUS_POINT) t_n = (t_n < 1) ? -2*ApplicationFacade.HORIZONTAL_FOCUS_POINT : 2*ApplicationFacade.HORIZONTAL_FOCUS_POINT;				sendNotification(ApplicationFacade.NOTE_TIMELINE_BOUNCE, t_n);				return false;			}			if ((_oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO).eraStartX -1> ApplicationFacade.CURRENT_X_IN_FOCUS - ApplicationFacade.HORIZONTAL_FOCUS_POINT) {			// entering the previous era				ApplicationFacade.CURRENT_ERA_IN_VIEW -= 1;				sendNotification(ApplicationFacade.NOTE_ENTERING_NEW_ERA);				return false;			}			if ((_oTimelineVO.eras[ApplicationFacade.CURRENT_ERA_IN_VIEW] as AGEraVO).eraEndX +1< ApplicationFacade.CURRENT_X_IN_FOCUS - ApplicationFacade.HORIZONTAL_FOCUS_POINT)  {			// entering the next era				ApplicationFacade.CURRENT_ERA_IN_VIEW += 1;				sendNotification(ApplicationFacade.NOTE_ENTERING_NEW_ERA);				return false;			}			return true;		}			}}