package net.believecollective.ag2010.patterns.commands {	import net.believecollective.ag2010.patterns.mediators.ControlsViewMediator;	import net.believecollective.ag2010.patterns.mediators.EventsDetailViewMediator;	import net.believecollective.ag2010.patterns.mediators.FeedbackViewMediator;	import net.believecollective.ag2010.patterns.mediators.HelpViewMediator;	import net.believecollective.ag2010.patterns.mediators.LoaderViewMediator;	import net.believecollective.ag2010.patterns.mediators.NavigatorViewMediator;	import net.believecollective.ag2010.patterns.mediators.TestPanelViewMediator;	import net.believecollective.ag2010.patterns.mediators.TimelineViewMediator;	import net.believecollective.ag2010.patterns.mediators.ToolTipViewMediator;	import net.believecollective.ag2010.view.factory.ViewFactory;	import net.believecollective.frameworks.pureMVC2.view.ViewBase;	import net.believecollective.model.vo.ViewCreationObjectVO;	import net.believecollective.utils.Tracer;	import org.puremvc.as3.interfaces.ICommand;	import org.puremvc.as3.interfaces.IMediator;	import org.puremvc.as3.interfaces.INotification;	import org.puremvc.as3.patterns.command.SimpleCommand;	/**	 * @author Dan Mackie (dan@believecollective.net)	 */	public class CreateViewAndMediatorCommand extends SimpleCommand implements ICommand {		override public function execute(notification : INotification) : void {			var t_o : ViewCreationObjectVO = notification.getBody() as ViewCreationObjectVO;			var t_oTarget : IMediator = facade.retrieveMediator(t_o.targetname);			var t_sMediator : String = t_o.mediatorname;			var t_sViewName : String = t_o.viewname;			var t_oViewArguments : Object = t_o.viewarguments;			var t_oView : ViewBase = ViewFactory.CREATE(t_sViewName);//			Tracer.TRACE("!!!Dan M : CreateViewAndMediatorCommand.execute : t_o.targetname = "+t_o.targetname);//			Tracer.TRACE("!!!Dan M : CreateViewAndMediatorCommand.execute : t_oTarget = "+t_oTarget);//			Tracer.TRACE("!!!Dan M : CreateViewAndMediatorCommand.execute : t_sMediator = "+t_sMediator);//			Tracer.TRACE("!!!Dan M : CreateViewAndMediatorCommand.execute : t_sViewName = "+t_sViewName);//			Tracer.TRACE("!!!Dan M : CreateViewAndMediatorCommand.execute : t_oViewArguments = "+t_oViewArguments);			t_oTarget.getViewComponent().addChild(t_oView);									switch (t_sMediator) {				case TimelineViewMediator.NAME:					facade.registerMediator(new TimelineViewMediator(t_oView));					break;				case NavigatorViewMediator.NAME:					facade.registerMediator(new NavigatorViewMediator(t_oView));					break;				case EventsDetailViewMediator.NAME:					facade.registerMediator(new EventsDetailViewMediator(t_oView));					break;				case FeedbackViewMediator.NAME:					facade.registerMediator(new FeedbackViewMediator(t_oView));					break;				case TestPanelViewMediator.NAME:					facade.registerMediator(new TestPanelViewMediator(t_oView));					break;				case LoaderViewMediator.NAME:					facade.registerMediator(new LoaderViewMediator(t_oView));					break;				case ToolTipViewMediator.NAME:					facade.registerMediator(new ToolTipViewMediator(t_oView));					break;				case ControlsViewMediator.NAME:					facade.registerMediator(new ControlsViewMediator(t_oView));					break;				case HelpViewMediator.NAME:					facade.registerMediator(new HelpViewMediator(t_oView));					break;				default:					Tracer.TRACE("!!!Dan M : CreateViewAndMediatorCommand.execute : YOU HAVEN'T DEFINED THE MEDIATOR NAME IN THE SWITCH: " + t_sMediator);			}		}	}}