package net.believecollective.ag2010.patterns.mediators {	import net.believecollective.ag2010.app.ApplicationFacade;	import net.believecollective.ag2010.patterns.proxy.ConfigProxy;	import net.believecollective.ag2010.patterns.proxy.HistoryProxy;	import net.believecollective.ag2010.patterns.proxy.LandscapeProxy;	import net.believecollective.ag2010.patterns.proxy.TimelineProxy;	import net.believecollective.ag2010.view.AGBaseView;	import net.believecollective.frameworks.pureMVC2.patterns.mediators.BaseMediator;	import org.puremvc.as3.interfaces.IMediator;	import flash.events.IOErrorEvent;	/**	 * @author Dan Mackie (dan@believecollective.net)	 */	public class AGBaseMediator extends BaseMediator implements IMediator {		protected var _oConfig : ConfigProxy;		protected var _oTimeline : TimelineProxy;		protected var _oLandscape : LandscapeProxy;		protected var _oHistory : HistoryProxy;				public function AGBaseMediator(name : String, viewComponent : Object = null) {			super(name, viewComponent);			_oConfig = facade.retrieveProxy(ConfigProxy.NAME) as ConfigProxy;			_oTimeline = facade.retrieveProxy(TimelineProxy.NAME) as TimelineProxy;			_oLandscape = facade.retrieveProxy(LandscapeProxy.NAME) as LandscapeProxy;			_oHistory = facade.retrieveProxy(HistoryProxy.NAME) as HistoryProxy;			viewComponent.interfaceText = _oConfig.fGetInterfaceTextVO(viewComponent.viewname);			(viewComponent as AGBaseView).fAddData(_oConfig,_oTimeline);				viewComponent.fInit();			viewComponent.gfx.addEventListener(IOErrorEvent.IO_ERROR, fImageLoadError); // if a thumbnail fails to load, this will halt the timeline gfx loading		}				private function fImageLoadError(e : IOErrorEvent) : void {			sendNotification(ApplicationFacade.NOTE_GFX_LOAD_ERROR);		}	}}