package net.believecollective.ag2010.patterns.mediators {	import net.believecollective.ag2010.app.ApplicationFacade;	import net.believecollective.ag2010.model.vo.AGTooltipVO;	import net.believecollective.ag2010.view.controls.ControlsView;	import net.believecollective.ag2010.view.controls.components.ControlsViewGFX;	import net.believecollective.frameworks.pureMVC2.app.ApplicationFacadeBase;	import org.puremvc.as3.interfaces.IMediator;	import org.puremvc.as3.interfaces.INotification;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	/**	 * @author Dan Mackie (dan@believecollective.net)	 */	public class ControlsViewMediator extends AGBaseMediator implements IMediator {		public static const NAME : String = "ControlsViewMediator";				private var _bFullScreen : Boolean;		private var _bHelp : Boolean;				public function ControlsViewMediator(viewComponent : Object = null) {			super(NAME, viewComponent);		}		public function get gfx() : ControlsView {			return viewComponent as ControlsView;		}		override public function listNotificationInterests() : Array {			var t_a : Array = super.listNotificationInterests();			var t_a2 : Array = t_a.concat(ApplicationFacade.NOTE_TOGGLE_HELP);			return 	t_a2;		}				override protected function fViewEvent(event : Event) : void {			switch ( event.type) {				case MouseEvent.CLICK:					switch (event.target.name){						case "_mcFullScreen" :							_bFullScreen = !(facade.retrieveMediator(ApplicationMediator.NAME) as ApplicationMediator).fullScreen;							sendNotification(ApplicationFacade.NOTE_TOGGLE_FULL_SCREEN, _bFullScreen);							(gfx.gfx as ControlsViewGFX)._mcFullScreen.fToggle(false);							sendNotification(ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT, null);							break;						case "_mcHelp" :							_bHelp = !(facade.retrieveMediator(HelpViewMediator.NAME) as HelpViewMediator).helpOn;							sendNotification(ApplicationFacade.NOTE_TOGGLE_HELP, _bHelp);							(gfx.gfx as ControlsViewGFX)._mcHelp.fToggle(false);							sendNotification(ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT, null);							break;						case "_mcTimeline" :							sendNotification(ApplicationFacade.NOTE_LAUNCH_TIMELINE);							sendNotification(ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT, null);							break;					}				break;				/////				case MouseEvent.MOUSE_OVER:					var t_oTTVO : AGTooltipVO;					switch (event.target.name){						case "_mcFullScreen" :							_bFullScreen = (facade.retrieveMediator(ApplicationMediator.NAME) as ApplicationMediator).fullScreen;							var t_sID : String = (_bFullScreen) ? "AGFullSceenBtnAlt" : "AGFullSceenBtn";							t_oTTVO = new AGTooltipVO(t_sID, "", "right",new Point(event.target.x+((5+event.target.width)/2), event.target.y));							break;						case "_mcHelp" :							_bHelp = (facade.retrieveMediator(HelpViewMediator.NAME) as HelpViewMediator).helpOn;							var t_sID : String = (_bHelp) ? "AGHelpBtnAlt" : "AGHelpBtn";							t_oTTVO = new AGTooltipVO(t_sID, "", "left", new Point(event.target.x+((5+event.target.width)/-2), event.target.y));							break;						case "_mcTimeline" :							t_oTTVO = new AGTooltipVO("AGTimelineBtn", "", "top", new Point(event.target.x, event.target.y +((5+event.target.height)/-2)),"left");							break;					}					sendNotification(ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT, t_oTTVO);				break;				/////				case MouseEvent.MOUSE_OUT:					sendNotification(ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT);				break;				/////			}		}		/**		 * Handle all notifications this Mediator is interested in.		 * 		 * @param INotification a notification 		 */		override public function handleNotification( note : INotification ) : void {			super.handleNotification(note);			switch(note.getName()){				case ApplicationFacade.NOTE_TOGGLE_HELP:					_bHelp = note.getBody() as Boolean;					break;			}		}			}}