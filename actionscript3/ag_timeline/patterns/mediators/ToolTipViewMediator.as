package net.believecollective.ag2010.patterns.mediators {	import net.believecollective.ag2010.app.ApplicationFacade;	import net.believecollective.ag2010.patterns.proxy.ConfigProxy;	import net.believecollective.ag2010.view.tooltip.AGToolTipView;	import net.believecollective.frameworks.pureMVC2.app.ApplicationFacadeBase;	import org.puremvc.as3.interfaces.IMediator;	import org.puremvc.as3.interfaces.INotification;	/**	 * @author Dan Mackie (dan@believecollective.net)	 */	public class ToolTipViewMediator extends AGBaseMediator implements IMediator {		public static const NAME : String = "ToolTipViewMediator";				public function ToolTipViewMediator(viewComponent : Object = null) {			super(NAME, viewComponent);			var t_oConfig : ConfigProxy = facade.retrieveProxy(ConfigProxy.NAME) as ConfigProxy;			gfx.config = t_oConfig;			gfx.interfaceText = t_oConfig.fGetInterfaceTextVO(AGToolTipView.NAME);		}		public function get gfx() : AGToolTipView {			return viewComponent as AGToolTipView;		}		override public function listNotificationInterests() : Array {			//The tooltip doesn't super like other mediators for normal view managers			return 	[						ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT,						ApplicationFacade.NOTE_MOUSE_LEAVE];        		}		/**		 * Handle all notifications this Mediator is interested in.		 * 		 * @param INotification a notification 		 */		override public function handleNotification( note : INotification ) : void {			super.handleNotification(note);			switch ( note.getName() ) {				case ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT:					if ((gfx.config as ConfigProxy).config.tooltipsOn)						gfx.fUpdate(note.getBody(), note.getName());					break;				case ApplicationFacade.NOTE_MOUSE_LEAVE:					// toggle off					if ((gfx.config as ConfigProxy).config.tooltipsOn)						gfx.fUpdate(null, ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT);//						Delay.DELAYCALLBACK(0.5, fDelayedComplete);					break;			}		}		private function fDelayedComplete() : void {			gfx.fUpdate(null, ApplicationFacadeBase.TOOLTIP_TOGGLE_EVENT);
		}
	}}