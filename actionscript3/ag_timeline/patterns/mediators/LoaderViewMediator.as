package net.believecollective.ag2010.patterns.mediators {	import net.believecollective.ag2010.app.ApplicationFacade;	import net.believecollective.ag2010.app.Main;	import net.believecollective.ag2010.patterns.proxy.HistoryProxy;	import net.believecollective.ag2010.view.loader.LoaderView;	import net.believecollective.ag2010.view.loader.components.LoaderViewGFX;	import net.believecollective.ag2010.view.loader.components.introanimation.AGExploreButton;	import net.believecollective.event.AnimationEvent;	import net.believecollective.frameworks.pureMVC2.app.ApplicationFacadeBase;	import org.puremvc.as3.interfaces.IMediator;	import org.puremvc.as3.interfaces.INotification;	import flash.events.Event;	import flash.events.MouseEvent;	/**	 * @author Dan Mackie (dan@believecollective.net)	 */	public class LoaderViewMediator extends AGBaseMediator implements IMediator {		public static const NAME : String = "LoaderViewMediator";		private var _bExplorable : Boolean;		public function LoaderViewMediator(viewComponent : Object = null) {			super(NAME, viewComponent);			(gfx.gfx as LoaderViewGFX).on = true;			(gfx.gfx as LoaderViewGFX).fToggle(true);			(gfx.gfx as LoaderViewGFX).fUpdate(1 / 3);			//Listen to loader complete			gfx.gfx.addEventListener(Event.COMPLETE, fLoaded);			//Listen to loader toggled tween done			gfx.gfx.addEventListener(AnimationEvent.TOGGLED, fToggled);			(ApplicationFacadeBase.ROOT as Main).removeChild((ApplicationFacadeBase.ROOT as Main).getChildByName("mcCircularLoader")); // remove the circular loader TODO : // this is not working .... 		}		private function fToggled(event : Event) : void {			if (!(event.target as LoaderViewGFX).on) fVisibilityView(false);		}
		private function fLoaded(event : Event) : void {			gfx.gfx.fToggle(false, 2);			if ((facade.retrieveProxy(HistoryProxy.NAME)as HistoryProxy).returningUser == false) sendNotification(ApplicationFacade.NOTE_TOGGLE_HELP, true);		}
		public function get gfx() : LoaderView {			return viewComponent as LoaderView;		}		override public function listNotificationInterests() : Array {			var t_a : Array = super.listNotificationInterests();			var t_a2 : Array = t_a.concat(ApplicationFacade.NOTE_UPDATE_LOADER, ApplicationFacade.NOTE_FINISH_LOADING_SEQUENCE, ApplicationFacade.NOTE_INIT_VIEWS);			return 	t_a2;		}		override protected function fViewEvent(event : Event) : void {			switch (event.type) {				case MouseEvent.CLICK :					sendNotification(ApplicationFacade.NOTE_TOGGLE_HELP, false);					if (!_bExplorable) return;					if (event.target is AGExploreButton) gfx.gfx.fToggle(false);					break;			}		}		/**		 * Handle all notifications this Mediator is interested in.		 * 		 * @param INotification a notification 		 */		override public function handleNotification( note : INotification ) : void {			super.handleNotification(note);			switch ( note.getName() ) {				case ApplicationFacade.NOTE_FINISH_LOADING_SEQUENCE:					(gfx.gfx as LoaderViewGFX).fUpdate(1); // labels all added					_bExplorable = true;					break;				case ApplicationFacade.NOTE_INIT_VIEWS:					(gfx.gfx as LoaderViewGFX).fUpdate(2 / 3); // xml loaded waiting for labels					break;				case ApplicationFacade.NOTE_UPDATE_LOADER:					var t_o : LoaderViewGFX = (gfx.gfx as LoaderViewGFX);					if (!t_o.on) {						t_o.on = true;						t_o.fToggle(true);						fVisibilityView(true);					}					break;			}		}	}}